# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'

steps:
#- script: dotnet build --configuration $(buildConfiguration)
#  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'New Manifest for tool'
  inputs:
    command: custom
    custom: 'new '
    arguments: tool-manifest

- task: DotNetCoreCLI@2  
  displayName: 'dotnet restore'  
  inputs:  
    command: restore  
    projects: '**/DotNetCoreSqlDb.Tests.csproj'  
    includeNuGetOrg: true  

- task: DotNetCoreCLI@2
  displayName: '.NET Core Build'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: '.NET Core Test'
  inputs:
    command: 'test'
    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    projects: '**/*[Tt]ests*.csproj'
    publishTestResults: true

- script: 'dotnet add package ReportGenerator --version 5.1.20'
  displayName: 'Add package ReportGenerator'

- task: reportgenerator@5
  displayName: ReportGenerator
  inputs:
    reports: cobertura.xml
    targetdir: coveragereport

#- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
#  displayName: 'Create code coverage report'
#  inputs:
#    reports: '$(Build.SourcesDirectory)\**\coverage.cobertura.xml'
#    targetdir: '$(Build.SourcesDirectory)\CodeCoverage'
#    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
#    assemblyfilters: '-xunit*'

- task: DotNetCoreCLI@2
  displayName: 'Install EF Tool'
  inputs:
    command: custom
    custom: 'tool '
    arguments: install dotnet-ef

- task: DotNetCoreCLI@2
  displayName: 'Create SQL Scripts'
  inputs:
    command: custom
    custom: 'ef '
    #arguments: migrations script --idempotent --output $(Build.SourcesDirectory)/SQL/tododbscript.sql --project $(Build.SourcesDirectory)/DotNetCoreSqlDb/DotNetCoreSqlDb.csproj --context TodoApiDbContext
    arguments: migrations script --idempotent --output tododbscript.sql --project DotNetCoreSqlDb/DotNetCoreSqlDb.csproj

- task: CopyFiles@2
  displayName: 'Copy EF Scripts to Staging'
  inputs:
    Contents: '**\tododbscript.sql'
    TargetFolder: '$(build.artifactstagingdirectory)'
    flattenFolders: true

- task: DotNetCoreCLI@2
  displayName: '.NET Core Publish'
  inputs:
    command: 'publish'
    publishWebProjects: true

- task: AzureWebApp@1
  displayName: 'Deploy Web Api to Linux container'
  inputs:
    azureSubscription: 'Microsoft Partner Network(a731b6ad-11f8-43a4-b567-d64b5ffd3faa)'
    appType: 'webAppLinux'
    appName: 'ReferenceA6'
    package: '$(System.DefaultWorkingDirectory)/**/*.zip'
    runtimeStack: 'DOTNETCORE|6.0'