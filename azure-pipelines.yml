# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'

steps:
#- script: dotnet build --configuration $(buildConfiguration)
#  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'New Manifest for tool'
  # required by dotnet-ef Tool.
  inputs:
    command: custom
    custom: 'new '
    arguments: tool-manifest

#- task: DotNetCoreCLI@2  
#  displayName: 'dotnet restore'  
#  inputs:  
#    command: restore  
#    projects: '**/DotNetCoreSqlDb.Tests.csproj'  
#    includeNuGetOrg: true  

- task: DotNetCoreCLI@2
  displayName: '.NET Core Build'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'

#- task: DotNetCoreCLI@2
#  displayName: '.NET Core Test'
#  inputs:
#    command: 'test'
#    #arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
#    arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code coverage" -- RunConfiguration.DisableAppDomain=true'  
#    projects: '**/*[Tt]ests*.csproj'
#    publishTestResults: true

#    #projects: '**/MyProject.UnitTests.csproj'  
#    #arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code coverage" -- RunConfiguration.DisableAppDomain=true'  
#    #testRunTitle: MyProject.UnitTests  

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true'
    workingDirectory: $(Build.SourcesDirectory)

- task: Bash@3
  displayName: 'List default working directory'
  inputs:
    targetType: 'inline'
    script: |
      ls -R '$(System.DefaultWorkingDirectory)'

#- script: 'dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.20'  
#  displayName: 'Install ReportGenerator tool'  

#- script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'  
#  displayName: 'Create reports'  

#- script: 'dotnet add package ReportGenerator --version 5.1.20'
#  displayName: 'Add package ReportGenerator'

- task: reportgenerator@5
  displayName: 'ReportGenerator code coverage report'
  inputs:
    #reports: '$(System.DefaultWorkingDirectory)/coverlet/reports/cobertura.xml'
    # From pipeline log:  /home/vsts/work/_temp/be690bad-07ce-49ea-8ea6-ad3105f753d5/coverage.cobertura.xml
    reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    #targetdir: coveragereport
    targetdir: '$(Build.SourcesDirectory)/coverlet/reports'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
    assemblyfilters: '-xunit*'

#- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
#  displayName: 'Create code coverage report'
#  inputs:
#    reports: '$(Build.SourcesDirectory)\**\coverage.cobertura.xml'
#    targetdir: '$(Build.SourcesDirectory)\CodeCoverage'
#    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
#    assemblyfilters: '-xunit*'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml

- task: DotNetCoreCLI@2
  # requires 'New Manifest for tool' executed earlier.
  displayName: 'Install EF Tool'
  inputs:
    command: custom
    custom: 'tool '
    arguments: install dotnet-ef

- task: DotNetCoreCLI@2
  displayName: 'Create SQL Scripts'
  inputs:
    command: custom
    custom: 'ef '
    #arguments: migrations script --idempotent --output $(Build.SourcesDirectory)/SQL/tododbscript.sql --project $(Build.SourcesDirectory)/DotNetCoreSqlDb/DotNetCoreSqlDb.csproj --context TodoApiDbContext
    arguments: migrations script --idempotent --output tododbscript.sql --project DotNetCoreSqlDb/DotNetCoreSqlDb.csproj

- task: DotNetCoreCLI@2
  displayName: 'Create EF migration bundle'
  inputs:
    command: custom
    custom: 'ef '
    arguments: 'migrations bundle -p DotNetCoreSqlDb/DotNetCoreSqlDb.csproj -o ${{env.DOTNET_ROOT}}/myapp/migrate'

- task: CopyFiles@2
  displayName: 'Copy EF Scripts to Staging'
  inputs:
    Contents: '**\sql'
    TargetFolder: '$(build.artifactstagingdirectory)'
    flattenFolders: true

- task: DotNetCoreCLI@2
  displayName: '.NET Core Publish'
  inputs:
    command: 'publish'
    publishWebProjects: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
    
- task: AzureWebApp@1
  displayName: 'Deploy Web Api to Linux container'
  inputs:
    azureSubscription: 'Microsoft Partner Network(a731b6ad-11f8-43a4-b567-d64b5ffd3faa)'
    appType: 'webAppLinux'
    appName: 'ReferenceA6'
    package: '$(System.DefaultWorkingDirectory)/**/*.zip'
    runtimeStack: 'DOTNETCORE|6.0'

- task: Bash@3
  displayName: 'List default working directory?'
  inputs:
    targetType: 'inline'
    script: |
      ls -R

- task: Bash@3
  displayName: 'List staging directory?'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(Build.StagingDirectory)'
    script: |
      ls -R

- task: Bash@3
  displayName: 'List default working directory'
  inputs:
    targetType: 'inline'
    script: |
      ls -R '$(System.DefaultWorkingDirectory)'

#- task: PowerShell@2
#  displayName: 'Show source directory files'
#  inputs:
#    targetType: 'inline'
#    script: 'Get-ChildItem -recurse'

#- task: PowerShell@2
#  displayName: 'Show staging directory files'
#  inputs:
#    targetType: 'inline'
#    workingDirectory: '$(Build.StagingDirectory)'
#    script: 'Get-ChildItem -recurse'

- task: SqlAzureDacpacDeployment@1
  inputs:
    azureSubscription: 'Microsoft Partner Network(a731b6ad-11f8-43a4-b567-d64b5ffd3faa)'
    AuthenticationType: 'server'
    ServerName: 'reference6-server'
    DatabaseName: 'reference6-database'
    SqlUsername: 'reference6-server-admin'
    SqlPassword: 'ZYGIFSHKFXX14I6L$'
    deployType: 'SqlTask'
    SqlFile: '$(System.DefaultWorkingDirectory)\**\tododbscript.sql'
    IpDetectionMethod: 'AutoDetect'